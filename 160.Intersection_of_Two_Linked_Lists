# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        h1,h2=headA,headB
        len1,len2=0,0
        while h1:
            len1+=1
            h1=h1.next
        while h2:
            len2+=1
            h2=h2.next
        h1,h2=headA,headB
        if len1>len2:
            h=len1-len2
            while h:
                h1=h1.next
                h-=1
        elif len1<len2:
            h=len2-len1
            while h:
                h2=h2.next
                h-=1
        while h1 and h2 and h1<>h2:
            h1,h2=h1.next,h2.next
        return h1
            
                
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        h1,h2=headA,headB
        if h1==h2:
            return h1
        while h1 and h2:
            h1,h2=h1.next,h2.next
        if h1 is None:
            h1=headB
        else:
            h2=headA
        while h1 and h2:
            h1,h2=h1.next,h2.next
        if h1 is None:
            h1=headB
        else:
            h2=headA
        while h1 and h2:
            if h1==h2:
                return h1
            h1,h2=h1.next,h2.next       
        return None
            
                
                
                
                
                
                
                        
                
                
                
                
        
