class Solution:
    def searchMatrix(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: bool
        """
        row=len(matrix)
        if row==0:
            return False
        else:
            col=len(matrix[0])
            if col==0:
                return False
            else:
                loc=0
                for i in range(row):
                    if i==0 and matrix[i][col-1]>target or matrix[i][col-1]==target:
                        loc=i
                        break
                    elif matrix[i][col-1]>target and matrix[i-1][col-1]<target:
                        loc=i
                        break
                return self.biSearch(matrix[loc],target)
        
    def biSearch(self,L,target):
        lens=len(L)
        left,right=0,lens-1
        while left<=right:
            mid=left+(right-left)//2
            if L[mid]<target:
                left=mid+1
            elif L[mid]>target:
                right=mid-1
            else:
                return True
        return False
                
        
        
