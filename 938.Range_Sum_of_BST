# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def rangeSumBST(self, root: 'TreeNode', L: 'int', R: 'int') -> 'int':
        def preorder(root,L):
            if not root:
                return
            L.append(root.val)
            preorder(root.left,L)
            preorder(root.right,L)
        l=[]
        preorder(root,l)
        return sum(num for num in l if num>=L and num<=R)
            
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def rangeSumBST(self, root: 'TreeNode', L: 'int', R: 'int') -> 'int':
        def preorder(root):
            if not root:
                return
            if root.val>=L and root.val<=R:
                self.s+=root.val
            preorder(root.left)
            preorder(root.right)
        self.s=0
        preorder(root)
        return self.s
        
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def rangeSumBST(self, root: 'TreeNode', L: 'int', R: 'int') -> 'int':
        def dfs(root):
            if not root:
                return
            if root.val>=L and root.val<=R:
                self.s+=root.val
            if L<root.val:
                dfs(root.left)
            if R>root.val:
                dfs(root.right)
        self.s=0
        dfs(root)
        return self.s
        
            
                    
                
